version: "3.9"

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot # For Let's Encrypt challenge
      - ./certbot/conf:/etc/letsencrypt # Certbot certificates
    depends_on:
      - app
    networks:
      - th_app_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot # For Let's Encrypt challenge
      - ./certbot/conf:/etc/letsencrypt # Persistent storage for certificates
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 30h & wait $${!}; certbot renew --quiet --deploy-hook \"nginx -s reload\"; done'"
    networks:
      - th_app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
    labels:
      - service=api
      - domain=th-api.ebsycloud.com
      - port=3000
    command: >
      sh -c "
      npm run migrate:prod &&
      node dist/server.js"
    networks:
      - th_app_network

  postgres:
    image: postgres:latest
    container_name: my-postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./docker_data/pg_data_31:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_user -h localhost || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - th_app_network

networks:
  th_app_network:
    driver: bridge
