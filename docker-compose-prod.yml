version: "3.9"

services:
  caddy:
    container_name: caddy
    image: caddy:latest
    restart: unless-stopped
    env_file: .env
    networks:
      - th_app_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./docker_data/caddy_data:/data
      - ./docker_data/caddy_config:/config

  api_server:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
    labels:
      - service=api
      - domain=th-api.ebsycloud.com
      - port=3000
    command: >
      sh -c "
      npm run migrate:prod &&
      node dist/server.js"
    networks:
      - th_app_network

  postgres:
    image: postgres:latest
    container_name: my-postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "6432:5432"
    volumes:
      - ./docker_data/pg_data_31:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U your_user -h localhost || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - th_app_network

  th_ssr_app:
    container_name: th_ssr_app
    build:
      context: web_app_th_ssr_app
    environment:
      NODE_ENV: production
    ports:
      - "4000:8000"
    networks:
      - th_app_network

networks:
  th_app_network:
    driver: bridge